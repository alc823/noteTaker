{"version":3,"sources":["NoteCreator.js","NoteList.js","App.js","serviceWorker.js","index.js"],"names":["NoteCreator","props","handleSubmit","setState","showError","newNote","title","state","description","date","Date","toLocaleString","id","category","isEmpty","notes","length","handleAddNote","handleChange","event","target","name","value","className","style","justifyContent","display","flexWrap","marginLeft","src","height","width","paddingTop","onSubmit","this","flex","paddingLeft","paddingRight","marginRight","type","placeholder","onChange","maxLength","color","onClick","React","Component","NoteList","handleEditNote","isFormVisible","handleFilterChange","handleRemoveCategory","chosenCategory","finalizedCategory","categories","map","note","borderColor","borderStyle","marginTop","backgroundColor","borderRadius","bordered","margin","textAlign","textDecoration","handleRemoveNote","marginBottom","App","prevState","indexOf","toDeleteNote","newNotesList","filter","toRemoveCategory","newCategoriesList","newTitle","newDescription","newCategory","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e5021b6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./NoteCreator.css\";\r\nimport { isEmpty } from \"lodash\";\r\nimport Typing from 'react-typing-animation';\r\n\r\nclass NoteCreator extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            description: '',\r\n            category: '',\r\n            showError: false,\r\n        }\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // runs handleAddNote when \"Make Note!\" button is pressed\r\n    // Code for getting current date: https://www.nicesnippets.com/blog/how-to-get-current-date-and-time-in-reactjs\r\n    handleSubmit = () => {\r\n        this.setState({\r\n            showError: false,\r\n        });\r\n        const newNote = {\r\n            title: this.state.title,\r\n            description: this.state.description,\r\n            date: new Date().toLocaleString(),\r\n            id: 0,\r\n            category: this.state.category\r\n        }\r\n        if (!isEmpty(this.props.notes)) {\r\n            newNote.id = this.props.notes[this.props.notes.length-1].id + 1;\r\n        }\r\n        \r\n        if (newNote.title === '' || newNote.description === '') {\r\n            this.setState({\r\n                showError: true\r\n            });\r\n        } else {\r\n            this.props.handleAddNote(newNote);\r\n        }\r\n        // this.props.handleAddNote(newNote);\r\n        this.setState({\r\n            title: '',\r\n            description: '',\r\n            category: ''\r\n        });\r\n    }\r\n\r\n    // updates state every time the text fields for title, description, or category for a new potential note is changed\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    // console.log()\r\n    render() {\r\n        return (\r\n            <div className=\"page\" style={{ justifyContent: \"center\" }}>\r\n                \r\n                <div className=\"title\" style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", marginLeft: 30 }}>\r\n                    <Typing>Note Taker</Typing>\r\n                    <img src=\"https://www.freepnglogos.com/uploads/pencil-png/pencil-png-transparent-png-pictures-icons-and-png-2.png\"\r\n                    style={{ height: 80, width: 80, paddingTop: 20 }}></img>\r\n                </div>\r\n\r\n                <form onSubmit={this.handleSubmit} className=\"form\">\r\n                    <div style={{ display: \"flex\" }} className=\"makeNote\">\r\n                        <div style={{ flex: 1, paddingLeft: 325, paddingRight: 0, marginRight: 0 }}>\r\n                            <label className=\"label\">\r\n                            Title:{\"               \"}<br/>\r\n                            <input type=\"text\" name=\"title\" id=\"title\" placeholder='' \r\n                            value={this.state.title} onChange={this.handleChange} className=\"textbox\"\r\n                            style={{ width: 200}} \r\n                            maxLength='50'/>\r\n                            </label>\r\n                            <br/>\r\n\r\n                            <label className=\"label\">\r\n                            Category:<br/>\r\n                            <input type=\"text\" name=\"category\" id=\"category\" placeholder='' value={this.state.category} \r\n                            onChange={this.handleChange} className=\"textbox\"\r\n                            style={{ width: 200 }} \r\n                            maxLength='50'/>\r\n                            </label>\r\n                            <br/>\r\n                        </div>\r\n\r\n                        <div style={{ flex: 2, paddingRight: 300, paddingLeft: 0, marginLeft: 0 }}>\r\n                            <label className=\"label\">\r\n                            Description:<br/>\r\n                            <textarea type=\"text\" name=\"description\" id=\"description\" placeholder='' \r\n                            value={this.state.description} onChange={this.handleChange}\r\n                            style={{ height: 75, width: 400 }} className=\"textbox\" \r\n                            maxLength='300'/>\r\n                            </label>\r\n                            <br/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </form>\r\n                <br/>\r\n                {this.state.showError &&\r\n                    <div style={{color: \"red\"}}>\r\n                        Your note must have a title and description.\r\n                    </div>\r\n                }\r\n                <button className=\"makeButton\" type=\"button\" onClick={this.handleSubmit}>Make Note!</button>\r\n\r\n\r\n                {/* References for Form + handleSubmit and handleChange: \r\n                https://stackoverflow.com/questions/36683770/how-to-get-the-value-of-an-input-field-using-reactjs\r\n                https://medium.com/zestgeek/how-to-handle-multiple-form-inputs-in-reactjs-2f68e3cf3cf8\r\n                https://reactjs.org/docs/forms.html\r\n                 */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoteCreator","import React, { Component } from \"react\";\r\nimport \"./NoteList.css\";\r\nimport { isEmpty } from \"lodash\";\r\nimport { Card } from 'antd';\r\n// Card component from Ant Design: https://ant.design/components/card/#\r\n\r\nclass NoteList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notes: [\r\n                { title: \"Main course 1\", description:\"blah\", date: new Date().toLocaleString() },\r\n            ],\r\n            categories: [],\r\n\r\n            title: '',\r\n            description: '',\r\n            category: '',\r\n            id: -1,\r\n\r\n            isFormVisible: false, // determines whether edit form is seen\r\n\r\n            chosenCategory: 'No Filter', // whatever option is currently selected in the filter dropdown menu\r\n            finalizedCategory: 'No Filter', // the option that is submitted for the filter dropdown menu\r\n        }\r\n    }\r\n\r\n    // Code for edit help: https://stackoverflow.com/questions/57362707/reactjs-show-edit-form-onclick\r\n    // runs handleEditNote if Edit button on any particular note is pressed\r\n    handleSubmit = () =>{\r\n        this.props.handleEditNote(this.state.id, this.state.title, this.state.description, this.state.category)\r\n        this.setState({\r\n            isFormVisible: false,\r\n        })\r\n    }\r\n\r\n    // updates state if title, description, or category text fields are changed in the edit form\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    // updates state if selected option in filter dropdown menu is changed\r\n    handleFilterChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    // runs handleRemoveCategory if the Remove Category buton is selected\r\n    handleRemoveCategory = () => {\r\n        this.props.handleRemoveCategory(this.state.chosenCategory)\r\n        this.setState({\r\n            chosenCategory: \"No Filter\",\r\n            finalizedCategory: \"No Filter\"\r\n        })\r\n    }\r\n\r\n    // Card Design: https://ant.design/components/card/#header\r\n    // Dropdown Reference: https://reactjs.org/docs/forms.html \r\n    render() {\r\n        const {notes} = this.props\r\n        return (\r\n            <div className=\"bottomPart\" style={{ display: \"flex\" }}>\r\n                <div className=\"notelist\" style={{ flex: 3 }}>\r\n                    <div className=\"sectionTitle\">Note List</div>\r\n                    <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                            {isEmpty(notes) &&\r\n                            <div className=\"empty\" style={{ display: \"flex\", justifyContent: \"center\" }}><br/><br/><br/>\r\n                            No notes yet. Fill out the fields at the top of the page to add notes!\r\n                            </div>\r\n                            }\r\n\r\n                            {notes.map(note => {\r\n                                return (\r\n                                    <div>\r\n                                    { (this.state.finalizedCategory == \"No Filter\" || note.category == this.state.finalizedCategory) &&\r\n                                        <div \r\n                                        style={{ \r\n                                            borderColor: \"black\", \r\n                                            borderStyle: \"double\", \r\n                                            width:300, \r\n                                            marginLeft: 5, \r\n                                            marginTop: 5, \r\n                                            backgroundColor: \"lightyellow\",\r\n                                            borderRadius: 10,\r\n                                            borderColor: \"gray\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"left\",\r\n                                        }}\r\n                                        className=\"noteContent\">\r\n                                            <div style={{ marginTop: 10 }}>\r\n                                            {(!this.state.isFormVisible || this.state.id !== note.id) && \r\n                                            <div bordered={true} className=\"card\"\r\n                                                style={{ \r\n                                                    width: 300,\r\n                                                }}\r\n                                            >\r\n                                                <div style={{margin: 20}}>{note.title}</div>\r\n                                                <div className=\"noteContent\">\r\n                                                            <div style={{ margin: 20, textAlign: \"left\", flexWrap: \"wrap\", display: \"flex\"}}>\r\n                                                                <div style={{display: \"inline\", textDecoration: \"underline\"}}>Last Edited:</div>{\" \"}{note.date}\r\n\r\n                                                                {note.category !== '' &&\r\n                                                                    <div>\r\n                                                                        <div style={{display: \"inline\", textDecoration: \"underline\"}}>Category:</div> {note.category}\r\n                                                                    </div>\r\n                                                                }\r\n                                                                <div style={{marginTop: 20}}>\r\n                                                                    <div style={{display: \"inline\", textDecoration: \"underline\" }}>Description:</div> {note.description}\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            \r\n                                                </div>\r\n                                                <div>\r\n                                                                {\" \"}\r\n                                                                <button className=\"button\" \r\n                                                                onClick={() => this.setState({\r\n                                                                    isFormVisible: true,\r\n                                                                    title: note.title,\r\n                                                                    description: note.description,\r\n                                                                    id: note.id,\r\n                                                                    category: note.category,\r\n                                                                })}>Edit</button>\r\n                                                            \r\n                                                                {\" \"}\r\n                                                                <button className=\"button\" onClick={() => this.props.handleRemoveNote(note)}>Remove</button>\r\n                                                            </div>\r\n                                                </div>\r\n\r\n                                            }\r\n                                            </div>\r\n\r\n                                            {this.state.isFormVisible && this.state.id == note.id && \r\n                                            <Card className=\"card\" \r\n                                            style={{ width: 300, marginTop: 20, marginBottom: 10 }}\r\n                                            >\r\n                                            <div className=\"noteContent\">\r\n                                                <form onSubmit={this.handleSubmit}>\r\n                                                    <label className=\"fieldLabel\">\r\n                                                    Title:</label>{\"   \"}\r\n                                                    <input type=\"text\" name=\"title\" id=\"title\" placeholder={note.title} \r\n                                                    value={this.state.title} onChange={this.handleChange}\r\n                                                    style={{ width: 150, marginLeft: 38 }}\r\n                                                    maxLength='50'/>\r\n                                                    \r\n\r\n                                                    <br></br>\r\n\r\n                                                    <label className=\"fieldLabel\" style={{ marginBottom: 40 }}>\r\n                                                    Description:</label>{\" \"}\r\n                                                    <textarea type=\"text\" name=\"description\" id=\"description\" \r\n                                                    placeholder={note.description} value={this.state.description} \r\n                                                    onChange={this.handleChange}\r\n                                                    style={{ height: 100, width: 150 }}\r\n                                                    maxLength='300'/>\r\n                                                    \r\n\r\n                                                    <br/>\r\n\r\n                                                    <label className=\"fieldLabel\">\r\n                                                    Category:</label>{\" \"}\r\n                                                    <input type=\"text\" name=\"category\" id=\"category\" placeholder={note.category} value={this.state.category} \r\n                                                    onChange={this.handleChange}\r\n                                                    style={{ width: 150, marginLeft: 13 }}\r\n                                                    maxLength='50'/>\r\n                                                    \r\n                                                </form>\r\n                                                <button type=\"button\" className=\"button\" onClick={this.handleSubmit}>Save</button>\r\n                                            </div>\r\n                                            </Card>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"categories\" style={{ flex: 1, marginRight: 5 }}>\r\n                    <div className=\"sectionTitle\" style={{ marginTop: 5 }}>Categories</div>\r\n                    <div className=\"categoryContent\" style={{ borderStyle: \"double\", borderColor: \"gray\" }}>\r\n                        {!isEmpty(this.props.categories) &&\r\n                            \r\n                            <div>\r\n                                <form>\r\n                                    <label>\r\n                                    Filter your notes based on category:<br/>\r\n                                    </label>\r\n                                    <select className=\"dropdown\" name=\"chosenCategory\" value={this.state.chosenCategory} onChange={this.handleFilterChange}>\r\n                                        <option className=\"option\">No Filter</option>\r\n                                        {this.props.categories.map(category => {\r\n                                            return (\r\n                                                <option className=\"option\">{category}</option>\r\n                                            );\r\n                                        })}\r\n                                    </select>\r\n                                    \r\n                                </form>\r\n                                <br/>\r\n                                <button type=\"button\" className=\"button\" onClick={() => this.setState({finalizedCategory: this.state.chosenCategory})}>Filter</button>{\" \"}\r\n                                <button type=\"button\" className=\"button\" onClick={this.handleRemoveCategory}>Remove Category</button>\r\n                            </div>\r\n\r\n                        }\r\n\r\n                        {isEmpty(this.props.categories) &&\r\n                        <div>\r\n                            No categories yet. Add categories by editing an existing note or creating a new note!\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NoteList;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NoteCreator from \"./NoteCreator.js\";\nimport NoteList from \"./NoteList.js\";\n\nclass App extends Component {\n\n  // Defining State\n  constructor(props) {\n    super(props)\n    this.state = {\n      notes: [\n        // { title: \"Example Note\", \n        // description:\"This is an example description - here is where you write the body of your note!\", \n        // date: new Date().toLocaleString(), \n        // id: 0, \n        // category: 'Task' },\n      ],\n      categories: [\n        // 'Task'\n      ],\n    }\n  }\n\n  /** handleAddNote(newNote)\n   * adds a new note to the notes list in state; also adds a new category if the category of the new note\n   * is not an empty string\n   * \n   * @param newNote the note to be added to the notes list in state\n   */\n  handleAddNote = (newNote) => {\n    this.setState(prevState => {\n      if (newNote.category !== '' && this.state.categories.indexOf(newNote.category) == -1) {\n        if (prevState.categories.length == 0) {\n          return {\n            notes: [...prevState.notes, newNote],\n            categories: [newNote.category]\n          }\n        }\n        return {\n          notes: [...prevState.notes, newNote],\n          categories: [...prevState.categories, newNote.category]\n        }\n      } else {\n        return { notes: [...prevState.notes, newNote] };\n      }\n    });\n  };\n\n  /** handleRemoveNote(toDeleteNote)\n   * removes a given note from the notes list in state; even if the note is the last of a particular category,\n   * the category will not be removed from the categories list in state unless explicitly done elsewhere\n   * \n   * @param toDeleteNote the note to be deleted\n   */\n  handleRemoveNote = (toDeleteNote) => {\n    const newNotesList = this.state.notes.filter(note => note.id !== toDeleteNote.id);\n    this.setState(prevState => {\n      return { notes: newNotesList };\n    })\n  }\n\n  /** handleRemoveCategory(toRemoveCategory)\n   * removes a category form the categories list in state\n   * \n   * @param toRemoveCategory the category to be removed\n   */\n  handleRemoveCategory = (toRemoveCategory) => {\n    this.setState(state => {\n      const newCategoriesList = this.state.categories.filter(category => category !== toRemoveCategory && category !== null)\n      const newNotesList = this.state.notes.map(note => {\n        if (note.category == toRemoveCategory) {\n          const adjustedNote = {\n            title: note.title,\n            description: note.description,\n            date: new Date().toLocaleString(),\n            id: note.id,\n            category: ''\n          }\n          return adjustedNote;\n        } else {\n          return note;\n        }\n      });\n\n      return {\n        notes: newNotesList,\n        categories: newCategoriesList\n    }\n    });\n  }\n\n  // Code for edit help: \n  /** handleEditNote (id, newTitle, newDescription, newCategory)\n   * edits an existing note; fields that can be changed include title, description, and category; if category\n   * is changed into something that is not already in the categories list in state AND that category is not an empty string,\n   * then the new category is added to the categories list in state\n   * \n   * @param id the id of the note in question; used to identify the correct note to edit\n   * @param newTitle the new title of the note; by default, is the old title of the note\n   * @param newDescription the new description of the note; by default is the old description of the note\n   * @param newCategory the new category of the note; by default is the old category of the note\n   * \n   * Sources: \n   * https://stackoverflow.com/questions/57362707/reactjs-show-edit-form-onclick\n   * https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n   * https://www.robinwieruch.de/react-state-array-add-update-remove\n   * https://stackoverflow.com/questions/45277306/check-if-item-exists-in-array-react\n   */\n  handleEditNote = (id, newTitle, newDescription, newCategory) => {\n    this.setState(state => {\n      const notes = this.state.notes.map(item => {\n        if (item.id == id) {\n          const adjustedItem = {\n            title: newTitle,\n            description: newDescription,\n            date: new Date().toLocaleString(),\n            id: id,\n            category: newCategory\n          }\n          return adjustedItem;\n        } else {\n          return item;\n        }\n      });\n      \n      if (this.state.categories.indexOf(newCategory) == -1 && newCategory !== '') {\n        if (this.state.categories.length == 0) {\n          return {\n            notes: notes,\n            categories: [newCategory]\n          }\n        } else {\n          return {\n            notes,\n            categories: [...this.state.categories, newCategory]\n          };\n        }\n      } else {\n        return {\n          notes: notes,\n          categories: [...this.state.categories]\n        }\n      }\n      \n    });\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <NoteCreator \n          notes = {this.state.notes}\n          handleAddNote = {this.handleAddNote}\n        />\n        <br>\n        </br>\n        <div style={{textAlign: \"center\"}}>\n          <NoteList \n            notes = {this.state.notes}\n            categories = {this.state.categories}\n            handleRemoveNote = {this.handleRemoveNote} \n            handleEditNote = {this.handleEditNote}\n            handleRemoveCategory = {this.handleRemoveCategory}\n          />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}